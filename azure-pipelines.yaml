name: Azure Pipelines

trigger:
- main

variables:
  python_version: '3.7.6'
  azureServiceConnectionId: 'AzureDevopsConnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'
  storage_account_name: 'tfstate224873291'
  container_name: 'tfstate'
  key: 'test.terraform.tfstate'
  resource_group_name_storage: 'AzuredevopsRG'
  address_space: '["10.5.0.0/16"]'
  address_prefix_test: '["10.5.1.0/24"]'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.2.9'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: '-input=false -lock=false -no-color -upgrade'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(resource_group_name_storage)'
        backendAzureRmStorageAccountName: '$(storage_account_name)'
        backendAzureRmContainerName: '$(container_name)'
        backendAzureRmKey: '$(key)'
        backendAzureRmUseMsi: true

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        commandOptions: '-auto-approve'

    - task: CmdLine@2
      displayName: 'Install Newman'
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      displayName: 'Run Data Validation Tests'
      continueOnError: true
      inputs:
        script: 'newman run DataValidationTestStarterAPIspostman_collection.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    - task: CmdLine@2
      displayName: 'Run Regression Tests'
      continueOnError: true
      inputs:
        script: 'newman run RegressionTestStarterAPIspostman_collection.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Postman Tests'

    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
      displayName: 'Upload UI Tests'
      artifact: drop-uitests

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive Performance Test Suite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Performance Test Suite'
      artifact: drop-perftests

- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: 'myapplication-ourobadiou-appservice'
              appType: 'webApp'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'

          - task: Bash@3
            displayName: 'Extract Performance Test Suite ZIP'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p /home/vsts/work/1/drop-perftests
                unzip $(Pipeline.Workspace)/drop-perftests/$(Build.BuildId)-perftests.zip -d /home/vsts/work/1/drop-perftests
                ls -la /home/vsts/work/1/drop-perftests

          - task: Bash@3
            displayName: 'Install JMeter'
            inputs:
              targetType: 'inline'
              script: |
                wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz
                tar -xzf apache-jmeter-5.6.2.tgz -C /home/vsts/work/1/drop-perftests
                ls -la /home/vsts/work/1/drop-perftests/apache-jmeter-5.6.2

          - task: Bash@3
            displayName: 'Run JMeter Stress Test'
            inputs:
              targetType: 'inline'
              script: |
                /home/vsts/work/1/drop-perftests/apache-jmeter-5.6.2/bin/jmeter -n -t /home/vsts/work/1/drop-perftests/StressTest.jmx \
                    -l /home/vsts/work/1/drop-perftests/log/jmeter/results_StressTest.csv \
                    -e -f -o /home/vsts/work/1/drop-perftests/log/jmeter/StressTestReport \
                    -j /home/vsts/work/1/drop-perftests/log/jmeter/JmeterStressTestReport.log \
                    -JexampleCSV=/home/vsts/work/1/drop-perftests/exempleCsv.csv \
                    -JresultsCSV=/home/vsts/work/1/drop-perftests/results.csv
              workingDirectory: /home/vsts/work/1/drop-perftests

          - task: Bash@3
            displayName: 'Run JMeter Endurance Test'
            inputs:
              targetType: 'inline'
              script: |
                /home/vsts/work/1/drop-perftests/apache-jmeter-5.6.2/bin/jmeter -n -t /home/vsts/work/1/drop-perftests/EnduranceTest.jmx \
                    -l /home/vsts/work/1/drop-perftests/log/jmeter/results_EnduranceTest.csv \
                    -e -f -o /home/vsts/work/1/drop-perftests/log/jmeter/EnduranceTestReport \
                    -j /home/vsts/work/1/drop-perftests/log/jmeter/JmeterEnduranceTestReport.log \
                    -JexampleCSV=/home/vsts/work/1/drop-perftests/exempleCsv.csv \
                    -JresultsCSV=/home/vsts/work/1/drop-perftests/results.csv
              workingDirectory: /home/vsts/work/1/drop-perftests

          - task: PublishBuildArtifacts@1
            displayName: 'Publish JMeter Test Results'
            inputs:
              pathToPublish: '/home/vsts/work/1/drop-perftests/log/jmeter'
              artifactName: 'jmeter-test-results'
              publishLocation: 'Container'

  - deployment: VMDeploy
    displayName: Selenium Tests
    dependsOn: FakeRestAPI
    environment:
      name: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests

          - task: Bash@3
            displayName: 'Unzip UI Tests'
            inputs:
              targetType: 'inline'
              script: |
                # Créez un répertoire pour décompresser les fichiers si nécessaire
                mkdir -p /home/vsts/work/1/drop-uitests
                # Décompressez l'archive ZIP
                unzip $(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip -d /home/vsts/work/1/drop-uitests
                # Listez les fichiers pour vérifier l'extraction
                ls -la /home/vsts/work/1/drop-uitests
                
                

          - task: Bash@3
            displayName: 'Install ChromeDriver and Google Chrome'
            inputs:
              targetType: 'inline'
              script: |
                # Mettez à jour le système et installez les dépendances nécessaires
                cd /home/vsts/work/1/drop-uitests
                sudo apt-get update -y
                sudo apt-get upgrade -y
                sudo apt-get install -y python3-pip unzip chromium-browser

                # Installez Selenium
                pip3 install selenium

                # Créez un répertoire pour les fichiers
                DIR=/home/vsts/work/1/drop-uitests
                if [ ! -d "$DIR" ]; then
                    mkdir -p $DIR
                fi

                # # Déplacez et décompressez l'archive ZIP
                # mv $(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip $DIR
                # cd $DIR
                # unzip -o $(Build.BuildId)-uitests.zip

                # # Téléchargez et installez ChromeDriver si nécessaire
                # CHROMEDRIVER_PATH=$DIR/chromedriver
                # if [ ! -f "$CHROMEDRIVER_PATH" ]; then
                #     LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                #     wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                #     unzip -o chromedriver_linux64.zip
                #     sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                # fi

                # Exécutez les tests Selenium
                echo "Starting Selenium Tests"
                python3 add_remove_from_cart.py >> selenium.log
                #python3 login.py >> selenium.log 2>&1
                # Affichez le contenu du fichier selenium.log
                #echo "Finish Selenium Test"
                #cat /home/vsts/work/1/drop-uitests/selenium.log

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Selenium Test Results'
            inputs:
              pathToPublish: '/home/vsts/work/1/drop-uitests/selenium.log'
              artifactName: 'selenium-test-results'
              publishLocation: 'Container'      
               